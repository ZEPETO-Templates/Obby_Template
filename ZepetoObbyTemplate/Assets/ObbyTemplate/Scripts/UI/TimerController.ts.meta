fileFormatVersion: 2
guid: 76974b934591cd74dabf7a8992fc3f14
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nconst UnityEngine_1 = require(\"UnityEngine\");\r\nconst
    ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst GameState_1 = require(\"../Managers/GameState\");\r\n//
    Class that controls the interactions with the timer screen\r\nclass TimerController
    extends ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n    constructor() {\r\n       
    super(...arguments);\r\n        this._timeRemaining = 0; // Time remaining in
    seconds\r\n        this._isRunning = false; // If timer is running\r\n       
    this._counter = 0; // Counter for update the visuals\r\n    }\r\n    // This
    method sets the duration variable and setups the timer\r\n    SetTimer(duration)
    {\r\n        // Get the duration and set it on \"_duration\"\r\n        this._duration
    = duration;\r\n        // Call to the internal function \"ResetTimer\"\r\n       
    this.ResetTimer();\r\n        // Call to the internal function \"UpdateVisual\"\r\n       
    this.UpdateVisual();\r\n        // Call to the internal function \"StartTimer\"\r\n       
    this.StartTimer();\r\n    }\r\n    // Update is called every frame, if the MonoBehaviour
    is enabled\r\n    Update() {\r\n        // Controls the time if the flag is true\r\n       
    // Check if the flag \"_isRunning\" is true\r\n        if (this._isRunning) {\r\n           
    // We subtract the elapsed time from the variable \"_timeRemaining\"\r\n           
    this._timeRemaining -= UnityEngine_1.Time.deltaTime;\r\n            // We add
    the elapsed time to the variable\r\n            this._counter += UnityEngine_1.Time.deltaTime;\r\n           
    // Check if the counter is more or equal to 1\r\n            if (this._counter
    >= 1) {\r\n                // Set the \"_counter\" on 0\r\n                this._counter
    = 0;\r\n                // Call to the internal function \"UpdateVisual\"\r\n               
    this.UpdateVisual();\r\n            }\r\n            // Check if the variable
    \"_timeRemaining\" is less or equal to 0\r\n            if (this._timeRemaining
    <= 0) {\r\n                // Call to the internal function \"UpdateVisual\"\r\n               
    this.UpdateVisual();\r\n                // Call to the internal function \"StopTimer\"\r\n               
    this.StopTimer();\r\n                // Call to the internal function \"OnGameOver\"\r\n               
    this.OnGameOver();\r\n            }\r\n        }\r\n    }\r\n    // This method
    controls the visual of the timer, normalizing the time to mins and secs\r\n   
    UpdateVisual() {\r\n        // Get the normalized value for the slider dividing
    the vairable \"_timeRemainin\" by \"_duration\"\r\n        let valueNormalized
    = this._timeRemaining / this._duration;\r\n        // We update the value of
    the slider\r\n        this.timeSlider.value = valueNormalized;\r\n        //
    Format the text to show it on the slider timer text\r\n        // We round the
    value of the minutes\r\n        let tempMin = UnityEngine_1.Mathf.FloorToInt(this._timeRemaining
    / 60);\r\n        // We round the value of the seconds\r\n        let tempSeg
    = UnityEngine_1.Mathf.RoundToInt(this._timeRemaining % 60);\r\n        // We
    create a text variable for the minutes\r\n        let tempMinString = tempMin
    <= 0 ? \" \" : tempMin.toString() + \" : \";\r\n        // We create a text variable
    for the seconds\r\n        let tempSegString = tempSeg < 10 ? \"0\" + tempSeg
    : tempSeg.toString();\r\n        // We update the \"remaininTxt\" text to a text
    string consisting of \"tempMinString\" and \"tempSegString\"\r\n        this.remainingTxt.text
    = tempMinString + tempSegString;\r\n    }\r\n    // This method change the flag
    \"isRunning\" to true\r\n    StartTimer() {\r\n        this._isRunning = true;\r\n   
    }\r\n    // This method change the flag \"isRunning\" to false\r\n    StopTimer()
    {\r\n        this._isRunning = false;\r\n    }\r\n    // This method reset the
    timer to the duration and the flag\r\n    ResetTimer() {\r\n        // We set
    the _timeRemaining to the \"_duration\" variable\r\n        this._timeRemaining
    = this._duration;\r\n        // We set the \"_isRunning\" flag on false\r\n       
    this._isRunning = false;\r\n    }\r\n    // This method Set the timer on 0 for
    the visuals\r\n    OnGameOver() {\r\n        // Set the text of \"remainingTxt\"
    on 00\r\n        this.remainingTxt.text = \"00\";\r\n        // Call to the OnGameOver
    function of the \"GameState\" instance\r\n        GameState_1.default.Instance.OnGameOver();\r\n   
    }\r\n    // This method get Time Remaining\r\n    GetTimeRemaining() {\r\n       
    return this._timeRemaining;\r\n    }\r\n    // This method get if time is running\r\n   
    GetIsRunning() {\r\n        return this._isRunning;\r\n    }\r\n}\r\nexports.default
    = TimerController;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGltZXJDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGltZXJDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQTBDO0FBRTFDLGlEQUFxRDtBQUNyRCxxREFBOEM7QUFFOUMsNkRBQTZEO0FBQzdELE1BQXFCLGVBQWdCLFNBQVEscUNBQXFCO0lBQWxFOztRQU1ZLG1CQUFjLEdBQVcsQ0FBQyxDQUFDLENBQUMsNEJBQTRCO1FBQ3hELGVBQVUsR0FBWSxLQUFLLENBQUMsQ0FBQyxzQkFBc0I7UUFDbkQsYUFBUSxHQUFXLENBQUMsQ0FBQyxDQUFDLGlDQUFpQztJQTZIbkUsQ0FBQztJQTNIRyw4REFBOEQ7SUFDdkQsUUFBUSxDQUFHLFFBQWdCO1FBRTlCLDZDQUE2QztRQUM3QyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUUxQiw2Q0FBNkM7UUFDN0MsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRWxCLCtDQUErQztRQUMvQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFcEIsNkNBQTZDO1FBQzdDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsZ0VBQWdFO0lBQ2hFLE1BQU07UUFFRix3Q0FBd0M7UUFDeEMseUNBQXlDO1FBQ3pDLElBQUssSUFBSSxDQUFDLFVBQVUsRUFDcEI7WUFDSSxrRUFBa0U7WUFDbEUsSUFBSSxDQUFDLGNBQWMsSUFBSSxrQkFBSSxDQUFDLFNBQVMsQ0FBQztZQUV0QywwQ0FBMEM7WUFDMUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxrQkFBSSxDQUFDLFNBQVMsQ0FBQztZQUVoQyw2Q0FBNkM7WUFDN0MsSUFBSyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsRUFDdkI7Z0JBQ0ksMEJBQTBCO2dCQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztnQkFFbEIsK0NBQStDO2dCQUMvQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDdkI7WUFFRCwrREFBK0Q7WUFDL0QsSUFBSyxJQUFJLENBQUMsY0FBYyxJQUFJLENBQUMsRUFDN0I7Z0JBQ0ksK0NBQStDO2dCQUMvQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7Z0JBRXBCLDRDQUE0QztnQkFDNUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUVqQiw2Q0FBNkM7Z0JBQzdDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQzthQUNyQjtTQUNKO0lBQ0wsQ0FBQztJQUVELHNGQUFzRjtJQUN0RixZQUFZO1FBRVIsK0ZBQStGO1FBQy9GLElBQUksZUFBZSxHQUFHLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUUzRCxvQ0FBb0M7UUFDcEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDO1FBRXhDLHNEQUFzRDtRQUN0RCxvQ0FBb0M7UUFDcEMsSUFBSSxPQUFPLEdBQVcsbUJBQUssQ0FBQyxVQUFVLENBQUUsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUUsQ0FBQztRQUVuRSxvQ0FBb0M7UUFDcEMsSUFBSSxPQUFPLEdBQVcsbUJBQUssQ0FBQyxVQUFVLENBQUUsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUUsQ0FBQztRQUVuRSw0Q0FBNEM7UUFDNUMsSUFBSSxhQUFhLEdBQVcsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBRTVFLDRDQUE0QztRQUM1QyxJQUFJLGFBQWEsR0FBVyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFOUUsc0dBQXNHO1FBQ3RHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLGFBQWEsR0FBRyxhQUFhLENBQUM7SUFDM0QsQ0FBQztJQUVELGtEQUFrRDtJQUMzQyxVQUFVO1FBRWIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUVELG1EQUFtRDtJQUM1QyxTQUFTO1FBRVosSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQUVELDJEQUEyRDtJQUNuRCxVQUFVO1FBRWQsd0RBQXdEO1FBQ3hELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUVyQyx3Q0FBd0M7UUFDeEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQUVELGlEQUFpRDtJQUN6QyxVQUFVO1FBRWQsdUNBQXVDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUU5Qiw4REFBOEQ7UUFDOUQsbUJBQVMsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVELGlDQUFpQztJQUMxQixnQkFBZ0I7UUFFbkIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLENBQUM7SUFFRCxxQ0FBcUM7SUFDOUIsWUFBWTtRQUVmLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDO0NBQ0o7QUFySUQsa0NBcUlDIn0=","assetPath":"Assets/ObbyTemplate/Scripts/UI/TimerController.ts","manifest":{"properties":[{"assembly":"UnityEngine.UI","name":"timeSlider","type":"UnityEngine.UI.Slider","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"remainingTxt","type":"UnityEngine.UI.Text","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]}],"name":"TimerController","description":"","hasAnimatorMove":false},"isCompiled":true}'
  typescriptHash: 0c3f81d46d16093f58bab80ebe7cfc13
  onlyWriteTrigger: 0
