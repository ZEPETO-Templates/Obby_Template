fileFormatVersion: 2
guid: 76974b934591cd74dabf7a8992fc3f14
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nconst UnityEngine_1 = require(\"UnityEngine\");\r\nconst
    ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst GameSettings_1 = require(\"../Managers/GameSettings\");\r\n//
    Class that controls the interactions with the timer screen\r\nclass TimerManager
    extends ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n    constructor() {\r\n       
    super(...arguments);\r\n        this._timeRemaining = 0; // Time remaining in
    seconds.\r\n        this._isRunning = false; // If timer is running.\r\n       
    this._counter = 0; // Counter for update the visuals\r\n    }\r\n    // Set up
    the duration of the timer\r\n    // and call the functions that shows up on the
    game\r\n    SetTimer(duration) {\r\n        this._duration = duration;\r\n       
    this.ResetTimer();\r\n        this.UpdateVisual();\r\n        this.StartTimer();\r\n   
    }\r\n    // Controls the time if the flag is true\r\n    Update() {\r\n       
    if (this._isRunning) {\r\n            this._timeRemaining -= UnityEngine_1.Time.deltaTime;\r\n           
    // Every 1 sec updates the visuals\r\n            this._counter += UnityEngine_1.Time.deltaTime;\r\n           
    if (this._counter >= 1) {\r\n                this._counter = 0;\r\n               
    this.UpdateVisual();\r\n            }\r\n            if (this._timeRemaining
    <= 0) {\r\n                this.UpdateVisual();\r\n                this.StopTimer();\r\n               
    this.OnGameOver();\r\n            }\r\n        }\r\n    }\r\n    // Controls
    the visual of the timer, normalizing the time to mins and secs\r\n    UpdateVisual()
    {\r\n        let valueNormalized = this._timeRemaining / this._duration; // Get
    the normalized value for the slider\r\n        this.timeSlider.value = valueNormalized;
    // Slider Update\r\n        // Format the text to show it on the slider timer
    text\r\n        let tempMin = UnityEngine_1.Mathf.FloorToInt(this._timeRemaining
    / 60);\r\n        let tempSeg = UnityEngine_1.Mathf.RoundToInt(this._timeRemaining
    % 60);\r\n        let tempMinString = tempMin <= 0 ? \" \" : tempMin.toString()
    + \" : \";\r\n        let tempSegString = tempSeg < 10 ? \"0\" + tempSeg : tempSeg.toString();\r\n       
    // ----------------------------------------------------\r\n        this.remainingTxt.text
    = tempMinString + tempSegString;\r\n    }\r\n    // Change the flag to true\r\n   
    StartTimer() {\r\n        this._isRunning = true;\r\n    }\r\n    // Change the
    flag to false\r\n    StopTimer() {\r\n        this._isRunning = false;\r\n   
    }\r\n    // Set the timer to the duration and the flag on false\r\n    ResetTimer()
    {\r\n        this._timeRemaining = this._duration;\r\n        this._isRunning
    = false;\r\n    }\r\n    // Set the timer on 0 for the visuals\r\n    OnGameOver()
    {\r\n        this.remainingTxt.text = \"00\";\r\n        GameSettings_1.default.Instance.OnGameOver();\r\n   
    }\r\n    /// Get Time Remaining\r\n    GetTimeRemaining() {\r\n        return
    this._timeRemaining;\r\n    }\r\n    /// Get if time is running\r\n    GetIsRunning()
    {\r\n        return this._isRunning;\r\n    }\r\n}\r\nexports.default = TimerManager;\r\n//#
    sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGltZXJNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGltZXJNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQTBDO0FBRTFDLGlEQUFxRDtBQUNyRCwyREFBb0Q7QUFJcEQsNkRBQTZEO0FBQzdELE1BQXFCLFlBQWEsU0FBUSxxQ0FBcUI7SUFBL0Q7O1FBTVksbUJBQWMsR0FBVyxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7UUFDekQsZUFBVSxHQUFZLEtBQUssQ0FBQyxDQUFDLHVCQUF1QjtRQUNwRCxhQUFRLEdBQVcsQ0FBQyxDQUFDLENBQUMsaUNBQWlDO0lBZ0ZuRSxDQUFDO0lBN0VHLG1DQUFtQztJQUNuQyxtREFBbUQ7SUFDNUMsUUFBUSxDQUFDLFFBQWdCO1FBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1FBRTFCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCx3Q0FBd0M7SUFDeEMsTUFBTTtRQUNGLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNqQixJQUFJLENBQUMsY0FBYyxJQUFJLGtCQUFJLENBQUMsU0FBUyxDQUFDO1lBRXRDLGtDQUFrQztZQUNsQyxJQUFJLENBQUMsUUFBUSxJQUFJLGtCQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2hDLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO2dCQUNsQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDdkI7WUFFRCxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQyxFQUFFO2dCQUMxQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFDakIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2FBQ3JCO1NBQ0o7SUFDTCxDQUFDO0lBRUQsMEVBQTBFO0lBQzFFLFlBQVk7UUFDUixJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQywwQ0FBMEM7UUFFdEcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDLENBQUMsZ0JBQWdCO1FBRXpELHNEQUFzRDtRQUN0RCxJQUFJLE9BQU8sR0FBVyxtQkFBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ2pFLElBQUksT0FBTyxHQUFXLG1CQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDakUsSUFBSSxhQUFhLEdBQVcsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBQzVFLElBQUksYUFBYSxHQUFXLE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM5RSx1REFBdUQ7UUFDdkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsYUFBYSxHQUFHLGFBQWEsQ0FBQztJQUMzRCxDQUFDO0lBRUQsMEJBQTBCO0lBQ25CLFVBQVU7UUFDYixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUMzQixDQUFDO0lBRUQsMkJBQTJCO0lBQ3BCLFNBQVM7UUFDWixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBRUQsc0RBQXNEO0lBQzlDLFVBQVU7UUFDZCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDckMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQUdELHFDQUFxQztJQUM3QixVQUFVO1FBQ2QsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQzlCLHNCQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxzQkFBc0I7SUFDZixnQkFBZ0I7UUFDbkIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLENBQUM7SUFFRCwwQkFBMEI7SUFDbkIsWUFBWTtRQUNmLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDO0NBQ0o7QUF4RkQsK0JBd0ZDIn0=","assetPath":"Assets/ObbyTemplate/Scripts/UI/TimerManager.ts","manifest":{"properties":[{"assembly":"UnityEngine.UI","name":"timeSlider","type":"UnityEngine.UI.Slider","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"remainingTxt","type":"UnityEngine.UI.Text","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]}],"name":"TimerManager","description":"","hasAnimatorMove":false},"isCompiled":true}'
  typescriptHash: 19cd9345d8616d846a33add6a998ab20
  onlyWriteTrigger: 0
